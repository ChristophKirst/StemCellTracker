classdef Experiment < handle
%
% Experiment class for storing info, filenames and results of an experiment 
%
% See also: Object, Frame, TimeSeries, Cell, Colony, Plate

   properties
      Name = '';                      % Name of experiment
      Date = '';                      % Date of experiment
      Description = '';               % Description of the Experiment / notes
 
      Result  = [];                   % result data of segmentation / analysis
      
      % file info
      
      BaseDirectory       = '.';      % all directories are w.r.t to this base directory
      ImageDirectoryName  = '';       % directory name in which the image data is stored relative to BaseDirectory
      ResultDirectoryName = '';       % directory for saving the results relative to BaseDirectory

      ReadImageCommandFormat  = '';   % image data access command, example: 'imread(<directory>\<file>)'
      ImageFileFormat         = ''    % format of individual file names, example: 'IMG_T<time,3>_C<channel,2>_P<poistion,2>.TIF'      
      ImageFormatNames        = ''    % ordering / names for ImageFileFormat placeholders <xxx>, example: {'time', 'channel', 'position'}
      ImageFormatRange        = [];   % range of the indices 
  
      % microscope/image info   
      Microscope = {};                % name of microscope with which images are taken
      ChannelNames = {};              % names for the different channels, order as stored in the statisics of Cell class
      PixelResolution = [];           % resolution of the images in um / Pixel in the different image dimensions
      MetaData = {};                  % space to store some meta data
      
      
      
      
      % statistics info
      StatisticsNames = {};           % names of the values in the statistics
      
  
   end
   
   properties (Dependent)
      ImageDirectory                  % directory name for image data
      ResultDirectory                 % directory name for results
   end
   
   methods
      
      %%% Constructor
      
      function obj = Experiment(varargin)  % basic constructor
         %
         % Experiment()
         % Experiment('Microscope' , microscopename)
         % Experiment(fieldname, fieldvalue)
         %
         
         for i = 1:2:nargin
            obj.(varargin{i}) = varargin{i+1};
         end
            
      end
       
      
      %%% FileName handling
      
      function ddir = get.ImageDirectory(obj)
         % description:
         %    returns the data - image directorty for the experiment
         %
         % output:
         %    ddir    data directory
         
         ddir = fullfile(obj.BaseDirectory, obj.ImageDirectoryName);
      end
      
      function ddir = get.ResultDirectory(obj)
         % description:
         %    returns the data - image directorty for the experiment
         %
         % output:
         %    ddir    result directory
         
         ddir = fullfile(obj.BaseDirectory, obj.ResultDirectoryName);
      end 
      
     
      function cmd = ReadImageCommand(obj, imagespec)
         % description:
         %    returns the command to open an image specified by imagespec
         %
         % output:
         %    cmd    the comand string the opens the image using eval(cmd)
         %
         % See also: fileformat2filename
         
         cmd = obj.ReadImageCommandFormat;
         cmd = strrep(cmd, '<directory>', obj.ImageDirectory);
         cmd = strrep(cmd, '<file>', obj.ImageFileFormat);
         
         if nargin < 2
            return
         else
            if isempty(obj.ImageFormatNames) || isstruct(imagespec)
               cmd = fileformat2filename(cmd, imagespec);
            else
               cmd = fileformat2filename(cmd, imagespec, obj.ImageFormatNames);
            end
         end
      end
       
      function data = ReadImage(obj, imagespec)
         % description:
         %    returns image data as generated by ReadDataCommand
         %
         % output:
         %    data     image data
         %
         % See also: Experiment.ReadImageCommand, fileformat2filename
         
         if nargin < 1
            data = eval(obj.ReadImageCommand());
         else
            data = eval(obj.ReadImageCommand(imagespec));
         end
      end


      function fn = FileName(obj, imagespec)
         % description:
         %    returns the filename specified by imagespec
         %
         % output:
         %    fn     filename
         %
         % See also: fileformat2filename
         
         fn = obj.FileFormat;
      
         if nargin > 1
            fn = fileformat2filename(fn, imagespec, obj.ImageFormatNames);
         end
         
         fn = fullfile(obj.DataDirectory, fn);

      end
      
      
      %%% Saving
      
      function fn = SaveResult(obj, fname, data, varargin) %#ok<INUSL>
         %
         % fn = SaveResult(obj, fname, varargin)
         %
         % description:
         %     save a result in the result folder creating subdirectories if necessary
         %
         % input: 
         %    fname    the file name relative to the ResultDirectory
         %    varargin arguments to save
         %
         % output:
         %    fn        the file name where results were saved
         %
         % See also: loadResults
   
         fn = fullfile(obj.ResultDirectory, fname);
         
         % create subfolder if necessary
         fnpath = fileparts(fn);
         if ~isdir(fnpath)
            mkdir(fnpath)
         end
         
         %save 
         save(fn, 'data', varargin{:});
      end
      
      
      function result = LoadResult(obj, fname, varargin)
         %
         % result = LoadResult(fname, varargin)
         %
         % description:
         %     load a result in the result folder
         %
         % input: 
         %    fname    the file name relative to the ResultDirectory
         %    varargin arguments to load
         %
         % output:
         %    result   the results
         %
         % See also: saveResults
   
         fn = fullfile(obj.ResultDirectory, fname);
         result = load(fn, varargin{:});
         result = result.data;
      end

      
      
      %%% Info
      
      function txt = InfoString(obj)
         % 
         % txt = InfoString()
         %
         % descrition:
         %    returns text with information about the experiment
         %
         
         
         txt = ['Experiment : ' obj.Name '\n'];
         if ~isempty(obj.Date)
            txt = [txt, 'Date       : ', obj.Date, '\n'];
         end
         
         if ~isempty(obj.Description)
            txt = [txt, 'Description: ', obj.Description, '\n'];
         end
         
         if ~isempty(obj.Microscope)
            txt = [txt, 'Microscope : ', obj.Microscope , '\n'];
         end
         
         txt = [txt, 'Files:\n'];
         txt = [txt, 'BaseDirectory  : ', obj.BaseDirectory, '\n']; 
         txt = [txt, 'ImageDirectory : ', obj.ImageDirectory, '\n'];
         txt = [txt, 'ResultDirectory: ', obj.ResultDirectory, '\n'];
         
         inf = whos('obj');
         txt = [txt, '\nMemory: ' num2str(inf.bytes/1024) ' kB\n'];
      end

      function Info(obj)
         % 
         % Info()
         %
         % descrition:
         %    prints text with information about the experiment
         %

         fprintf(obj.InfoString());
        
      end

      %%% Statistics 
      
      function pos = StatisticsIdx(obj, snames)
         % 
         % pos = StatisticsIdx(snames)
         %
         % descrition:
         %    returns the indices of the statistics names in StatisticsNames
         %  
         
         if iscellstr(snames)
            pos =cellfun(@(x) find(strcmp(obj.StatisticsNames, x),1), snames, 'UniformOutput', false);
            pos = [pos{:}];
         else
            pos = strfind(obj.StatisticsNames, snames);
         end
      end
      
      
      %%% Todo: Plotting some basic routines for plotting overview of results etc...

   end % methods
end % classdef
      
      



   

